import { GoogleGenerativeAI } from "@google/generative-ai";

// Initialize Gemini AI (lazy initialization to ensure env is loaded)
let genAI = null;
const getGenAI = () => {
  if (!genAI) {
    if (!process.env.GEMINI_API_KEY) {
      throw new Error("GEMINI_API_KEY is not set in environment variables");
    }
    genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  }
  return genAI;
};

/**
 * Analyze user story and recommend top 3 products from the given list
 * @param {string} userStory - User's description of what they need
 * @param {Array} products - Array of product objects with details
 * @returns {Promise<Object>} - Analysis result with top 3 recommendations and reasons
 */
export const analyzeAndRecommendProducts = async (userStory, products) => {
  try {
    // Get the generative model
    // Using Gemini 2.0 Flash (Experimental) - latest model, supports all API keys
    // You can also use: "gemini-1.5-flash", "gemini-1.5-pro", "gemini-2.0-flash-exp"
    const genAIInstance = getGenAI();
    const model = genAIInstance.getGenerativeModel({
      model: "gemini-2.0-flash-exp",
    });

    // Prepare products data for analysis
    const productsData = products.map((product, index) => ({
      id: product._id.toString(),
      index: index + 1,
      name: product.name,
      description: product.description,
      price: product.price || "N/A",
      specifications: product.specifications
        ? Object.fromEntries(product.specifications)
        : {},
      category: product.category_id?.name || "Unknown",
    }));

    // Create prompt for Gemini
    const prompt = `
B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n s·∫£n ph·∫©m c√¥ng ngh·ªá Apple. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch nhu c·∫ßu c·ªßa kh√°ch h√†ng v√† ƒë·ªÅ xu·∫•t 3 s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t t·ª´ danh s√°ch d∆∞·ªõi ƒë√¢y.

NHU C·∫¶U KH√ÅCH H√ÄNG:
${userStory}

DANH S√ÅCH S·∫¢N PH·∫®M:
${JSON.stringify(productsData, null, 2)}

Y√äU C·∫¶U:
1. Ph√¢n t√≠ch k·ªπ nhu c·∫ßu c·ªßa kh√°ch h√†ng
2. Ch·ªçn T·ªêI ƒêA 3 s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t (n·∫øu c√≥ √≠t h∆°n 3 s·∫£n ph·∫©m th√¨ ch·ªçn t·∫•t c·∫£, x·∫øp h·∫°ng t·ª´ 1-3, 1 l√† ph√π h·ª£p nh·∫•t)
3. V·ªõi m·ªói s·∫£n ph·∫©m, gi·∫£i th√≠ch ng·∫Øn g·ªçn (2-3 c√¢u) T·∫†I SAO s·∫£n ph·∫©m n√†y ph√π h·ª£p v·ªõi nhu c·∫ßu

ƒê·ªäNH D·∫†NG TR·∫¢ L·ªúI (B·∫ÆT BU·ªòC PH·∫¢I THEO ƒê√öNG JSON):
{
  "recommendations": [
    {
      "productId": "ID c·ªßa s·∫£n ph·∫©m",
      "rank": 1,
      "reason": "L√Ω do t·∫°i sao s·∫£n ph·∫©m n√†y ph√π h·ª£p (2-3 c√¢u, ti·∫øng Vi·ªát)"
    },
    {
      "productId": "ID c·ªßa s·∫£n ph·∫©m",
      "rank": 2,
      "reason": "L√Ω do t·∫°i sao s·∫£n ph·∫©m n√†y ph√π h·ª£p (2-3 c√¢u, ti·∫øng Vi·ªát)"
    },
    {
      "productId": "ID c·ªßa s·∫£n ph·∫©m",
      "rank": 3,
      "reason": "L√Ω do t·∫°i sao s·∫£n ph·∫©m n√†y ph√π h·ª£p (2-3 c√¢u, ti·∫øng Vi·ªát)"
    }
  ]
}

CH√ö √ù:
- Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text n√†o kh√°c
- productId ph·∫£i l√† ID th·∫≠t t·ª´ danh s√°ch s·∫£n ph·∫©m
- N·∫øu c√≥ √≠t h∆°n 3 s·∫£n ph·∫©m, ch·ªâ c·∫ßn ƒë·ªÅ xu·∫•t s·ªë s·∫£n ph·∫©m c√≥ s·∫µn (1-2 s·∫£n ph·∫©m c≈©ng ƒë∆∞·ª£c)
- L√Ω do ph·∫£i c·ª• th·ªÉ, li√™n quan ƒë·∫øn nhu c·∫ßu c·ªßa kh√°ch h√†ng
- Vi·∫øt b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, th√¢n thi·ªán
`;

    // Generate content
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    // Parse JSON response
    let parsedResponse;
    try {
      // Remove markdown code blocks if present
      const cleanText = text
        .replace(/```json\n?/g, "")
        .replace(/```\n?/g, "")
        .trim();
      parsedResponse = JSON.parse(cleanText);
    } catch (parseError) {
      console.error("Failed to parse Gemini response:", text);
      throw new Error("Failed to parse AI response");
    }

    // Validate response structure
    if (
      !parsedResponse.recommendations ||
      !Array.isArray(parsedResponse.recommendations)
    ) {
      throw new Error("Invalid response structure from AI");
    }

    // Get token usage info
    const tokenCount = response.usageMetadata
      ? response.usageMetadata.totalTokenCount
      : 0;

    return {
      recommendations: parsedResponse.recommendations,
      tokenUsed: tokenCount,
    };
  } catch (error) {
    console.error("Gemini API Error:", error.message);
    throw new Error(`AI analysis failed: ${error.message}`);
  }
};

/**
 * Generate greeting message with categories
 * @param {Array} categories - Array of category objects
 * @returns {string} - Greeting message
 */
export const generateGreetingMessage = (categories) => {
  const categoryList = categories
    .map((cat, index) => `${index + 1}. ${cat.name}`)
    .join("\n");

  return `Xin ch√†o! üëã

T√¥i l√† tr·ª£ l√Ω AI c·ªßa MacZone, r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n t√¨m ki·∫øm s·∫£n ph·∫©m Apple ph√π h·ª£p nh·∫•t!

ƒê·ªÉ gi√∫p b·∫°n t√¨m ƒë∆∞·ª£c s·∫£n ph·∫©m ∆∞ng √Ω, h√£y cho t√¥i bi·∫øt b·∫°n ƒëang t√¨m lo·∫°i s·∫£n ph·∫©m n√†o:

${categoryList}

B·∫°n mu·ªën t√¨m lo·∫°i s·∫£n ph·∫©m n√†o? üòä`;
};

/**
 * Generate price range selection message
 * @param {Array} priceRanges - Array of price range objects
 * @returns {string} - Price range message
 */
export const generatePriceRangeMessage = (categoryName, priceRanges) => {
  const rangeList = priceRanges
    .map((range, index) => {
      const minFormatted = range.min.toLocaleString("vi-VN");
      const maxFormatted = range.max
        ? range.max.toLocaleString("vi-VN")
        : "Tr·ªü l√™n";
      return `${index + 1}. ${minFormatted}‚Ç´ - ${
        range.max ? maxFormatted + "‚Ç´" : maxFormatted
      }`;
    })
    .join("\n");

  return `Tuy·ªát v·ªùi! B·∫°n ƒë√£ ch·ªçn ${categoryName}. 

ƒê·ªÉ t√¨m ƒë∆∞·ª£c s·∫£n ph·∫©m ph√π h·ª£p v·ªõi ng√¢n s√°ch c·ªßa b·∫°n, h√£y cho t√¥i bi·∫øt kho·∫£ng gi√° b·∫°n quan t√¢m:

${rangeList}

B·∫°n mu·ªën ch·ªçn kho·∫£ng gi√° n√†o? üí∞`;
};

/**
 * Generate story request message
 * @param {string} categoryName - Selected category name
 * @param {number} priceMin - Min price
 * @param {number} priceMax - Max price
 * @returns {string} - Story request message
 */
export const generateStoryRequestMessage = (
  categoryName,
  priceMin,
  priceMax
) => {
  const priceRange = priceMax
    ? `${priceMin.toLocaleString("vi-VN")}‚Ç´ - ${priceMax.toLocaleString(
        "vi-VN"
      )}‚Ç´`
    : `T·ª´ ${priceMin.toLocaleString("vi-VN")}‚Ç´ tr·ªü l√™n`;

  return `Tuy·ªát v·ªùi! T√¥i ƒë√£ hi·ªÉu:
- Lo·∫°i s·∫£n ph·∫©m: ${categoryName}
- Kho·∫£ng gi√°: ${priceRange}

B√¢y gi·ªù, h√£y cho t√¥i bi·∫øt th√™m v·ªÅ nhu c·∫ßu s·ª≠ d·ª•ng c·ªßa b·∫°n nh√©! V√≠ d·ª•:
- B·∫°n s·∫Ω d√πng s·∫£n ph·∫©m ƒë·ªÉ l√†m g√¨? (l√†m vi·ªác, h·ªçc t·∫≠p, gi·∫£i tr√≠, ch∆°i game...)
- B·∫°n c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát n√†o kh√¥ng? (m√†n h√¨nh l·ªõn, pin tr√¢u, hi·ªáu nƒÉng cao...)
- B·∫°n quan t√¢m ƒë·∫øn t√≠nh nƒÉng n√†o nh·∫•t?

H√£y m√¥ t·∫£ chi ti·∫øt ƒë·ªÉ t√¥i c√≥ th·ªÉ g·ª£i √Ω ch√≠nh x√°c nh·∫•t cho b·∫°n! ‚ú®`;
};

export default {
  analyzeAndRecommendProducts,
  generateGreetingMessage,
  generatePriceRangeMessage,
  generateStoryRequestMessage,
};
